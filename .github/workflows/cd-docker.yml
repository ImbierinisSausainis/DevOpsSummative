name: Build and Deploy Docker Image

on:
 workflow_run:
    workflows: ["Java CI with Maven"]
    types:
      - completed

jobs:
  build:
    if: github.event.workflow_run.conclusion == 'success'
    runs-on: ubuntu-latest
    outputs:
      new_version: ${{ steps.versioning.outputs.new_version }}

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0 # Needed to analyze commit history
    
    - name: Download Build Artifact
      uses: actions/download-artifact@v4
      with:
        name: java-web-app
        run-id: ${{ github.event.workflow_run.id }}
        github-token: ${{ secrets.GITHUB_TOKEN }}

    - name: Log in to DockerHub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PAT }}

    - name: Build with Maven
      run: mvn clean package

    - name: Build and Push Docker Image
      uses: docker/build-push-action@v4
      with:
        push: true
        tags: ${{ secrets.DOCKER_USERNAME }}/java-web-app:latest
        file: ./Dockerfile
        context: .

    - name: Set up Node.js # Or Python, Go, etc., depending on your versioning tool
      uses: actions/setup-node@v3
      with:
        node-version: 'lts/*'

    - name: Install semantic-release CLI
      run: npm install -g semantic-release@23

    - name: Analyze commits and determine next version
      id: versioning
      run: |
        NEW_VERSION=$(npx semantic-release --dry-run --branches main --plugins "@semantic-release/commit-analyzer,@semantic-release/release-notes-generator,@semantic-release/github")
        if [[ $NEW_VERSION =~ ^v[0-9]+\.[0-9]+\.[0-9]+ ]]; then
          echo "::set-output name=new_version::$NEW_VERSION"
          echo "New semantic version detected: $NEW_VERSION"
        else
          echo "No semantic version change detected."
          exit 0 # Exit gracefully if no new version
        fi
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Update version in project files # Example - adjust for your project
      if: steps.versioning.outputs.new_version
      run: |
        # Example for updating a package.json file
        sed -i "s/\"version\": \".*\"/\"version\": \"${{ steps.versioning.outputs.new_version }}\"/" package.json
        git commit -am "chore(release): v${{ steps.versioning.outputs.new_version }}"
        git push

    - name: Create Git tag and release
      if: steps.versioning.outputs.new_version
      run: |
        git tag ${{ steps.versioning.outputs.new_version }}
        git push origin ${{ steps.versioning.outputs.new_version }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # Optional: Further deployment or notification jobs can depend on this job's output
  deploy:
    needs: build
    if: needs.semantic_versioning.outputs.new_version
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy application # Replace with your deployment steps
        run: |
          echo "Deploying version ${{ needs.semantic_versioning.outputs.new_version }}..."
          # Your deployment commands here